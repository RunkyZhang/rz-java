server:
  port: 5050

management:
  endpoints:
    web:
      exposure:
        include: gateway  # "*"为暴露所有端点
  endpoint:
    gateway: # http://localhost:5050/actuator/gateway/routes；post http://localhost:5050/actuator/gateway/refresh
      enabled: true  # 确保Gateway端点启用

spring:
  application:
    name: rz-api-gateway
  main:
    allow-bean-definition-overriding: true
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
      config:
        server-addr: localhost:8848
        file-extension: properties
        namespace: dev
        extension-configs[0]:
          data-id: redis.properties
          group: DEFAULT_GROUP
          refresh: true
    gateway:
      # 还有一个get转post的路由（id：getToPostAndAddBody）在代码的bean中定义。因为需要在body中添加json数据比较复杂只能用代码定义。http://localhost:5050/sayHello
      routes:
        # 访问http://localhost:5050/google时候会把localhost:5050替换成localhost:5050。但是有StripPrefix=1，就会把后/google忽略
        # 最终访问https://www.bing.com
        - id: path_route1
          predicates:
            - Path=/google
          filters:
            - StripPrefix=1
          uri: https://www.bing.com
        # 使用Get方式访问http://localhost:5050/getConfig时候会把localhost:5050替换成localhost:7070。并把/getConfig接在后面
        # 最终访问http://localhost:7070/getConfig
        # 通过nacos注册中心负载均衡（lb://ww-user-bases = http://localhost:7070）的方式调用
        - id: path_route2
          predicates:
            - Path=/getConfig
            - Method=GET
          uri: lb://ww-user-base
        # 使用Delete的方式，并带json的body访问http://localhost:5050/sayHello时候会把localhost:5050替换成localhost:7070
        # 最终使用Post方式访问http://localhost:7070/sayHello
        # 把Delete请求转为Post请求。注意sayHello接口需要一个body（json）
        - id: path_route3
          predicates:
            - Path=/sayHello
            - Method=DELETE
          filters:
            - ChangeMethod=POST
          uri: http://localhost:7070


# 在nacos中也配置路由侧路。因为naocs中配置后加载，所以会完全覆盖本地路由配置。但不包括bean的方式添加的路由
# spring.cloud.gateway.routes[0].id=path_route1
# spring.cloud.gateway.routes[0].predicates[0]=Path=/google
# spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1
# spring.cloud.gateway.routes[0].uri=https://www.baidu.com
# spring.cloud.gateway.routes[1].id=path_route2
# spring.cloud.gateway.routes[1].predicates[0]=Path=/getConfig
# spring.cloud.gateway.routes[1].predicates[1]=Method=GET
# spring.cloud.gateway.routes[1].uri=lb://ww-user-base
# spring.cloud.gateway.routes[2].id=path_route3
# spring.cloud.gateway.routes[2].predicates[0]=Path=/sayHello
# spring.cloud.gateway.routes[2].predicates[1]=Method=DELETE
# spring.cloud.gateway.routes[2].filters[0]=ChangeMethod=POST
# spring.cloud.gateway.routes[2].uri=http://localhost:7070